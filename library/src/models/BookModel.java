package models;


import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

public class BookModel extends BaseModel implements Serializable {

    //id will be generated by database in BaseModel class

    private int year;

    /**
     * if books is lent, then lentUserId keeps user identifier
     */
    private int lentUserId;

    private BookType bookType;
    private String title;

    private List<String> authors;

    public BookModel(BookType bookType, int year, String title, List<String> authors) {
        this.bookType = bookType;
        this.year = year;
        setDate(new Date());
        this.title = title;
        this.authors = authors;
        this.lentUserId = 0;
    }

    public BookModel() {
    }

    public String getTitle() {
        return title;
    }

    public List<String> getAuthors() {
        return authors;
    }

    public int getLentUserId() {
        return this.lentUserId;
    }

    public boolean isBookLent() {
        return this.lentUserId > 0;
    }

    public BookType getBookType() {
        return bookType;
    }

    public void setBookType(BookType bookType) {
        this.bookType = bookType;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public void setAuthors(List<String> authors) {
        this.authors = authors;
    }

    public void lentBook(int userId) {
        this.lentUserId = userId;
    }

    public int getYear() {
        return year;
    }

    public void setYear(int year) {
        this.year = year;
    }

    @Override
    public void serialize(ObjectOutputStream outputStream) throws IOException {
        outputStream.writeObject(getId());
        outputStream.writeObject(getDate());
        outputStream.writeObject(lentUserId);
        outputStream.writeObject(bookType);
        outputStream.writeObject(title);
        outputStream.writeObject(authors.size());
        //Authors
        for (String author : authors) {
            outputStream.writeObject(author);
        }
    }

    @Override
    public void deserialize(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {
        Integer number = (Integer) inputStream.readObject();
        setId(number);

        setDate((Date) inputStream.readObject());

        number = (Integer) inputStream.readObject();
        lentBook(number);

        setBookType((BookType) inputStream.readObject());
        setTitle((String) inputStream.readObject());

        //read Authors
        number = (Integer) inputStream.readObject();
        List<String> list = new ArrayList<>(number);
        for (int i=0; i < number; i++) {
            String author = (String) inputStream.readObject();
            list.add(author);
        }
        setAuthors(list);
    }

    private static String getShortBookKey(String title, int cnt, String posfixDots) {
        return title.substring(0, (title.length() > cnt ? cnt : title.length())) + (title.length() > cnt ? posfixDots : "");
    }

    public static String getShortBookKey(String title) {
        return getShortBookKey(title, 5, "");
    }

    public static String getShortBookKey(BookModel bookModel) {
        return BookModel.getShortBookKey(bookModel.getTitle());
    }

    public String getShortBookTitle(int cnt) {
        return "title: " + getShortBookKey(title, cnt, "...");
    }

    @Override
    public String toString() {
        int cnt = 70;
        return getClass().getName() +
                "\nid: " + getId() +
                "\n" +
                "year: " + getYear() +
                "\n" +
                getShortBookTitle(cnt) +
                "\n" +
                "author(s): " + String.join(", ", authors) +
                "\n" +
                "type: " + bookType +
                "\n" +
                (lentUserId == 0 ? "book is available" : "book is lent")
        ;
    }
}
